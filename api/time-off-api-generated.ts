/* tslint:disable */
/* eslint-disable */
/*
Endpoints

Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { TimeOffGetAllRequestsResponse } from '../models';
// @ts-ignore
import { TimeOffGetEntitlementsResponse } from '../models';
// @ts-ignore
import { TimeOffGetRequestResponse } from '../models';
// @ts-ignore
import { TimeOffRejectRequestRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeOffApi - axios parameter creator
 * @export
 */
export const TimeOffApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approves a time off request.
         * @summary Approve request
         * @param {string} id Time Off Request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveRequest: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approveRequest', 'id', id)
            const localVarPath = `/v1/time_off/requests/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off/requests/{id}/approve',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all Time Off Requests for a company.
         * @summary Retrieve all requests
         * @param {number} [perPage] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRequests: async (perPage?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/time_off/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off/requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns entitlements for each engagement of the company.
         * @summary Retrieve entitlements
         * @param {number} [perPage] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlements: async (perPage?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/time_off/entitlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off/entitlements',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns details for a request.
         * @summary Retrieve an individual request
         * @param {string} id Time Off Request ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequest: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRequest', 'id', id)
            const localVarPath = `/v1/time_off/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off/requests/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rejects a time off request.
         * @summary Reject request
         * @param {string} id Time Off Request ID
         * @param {TimeOffRejectRequestRequest} [timeOffRejectRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectRequest: async (id: string, timeOffRejectRequestRequest?: TimeOffRejectRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rejectRequest', 'id', id)
            const localVarPath = `/v1/time_off/requests/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffRejectRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/time_off/requests/{id}/reject',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffRejectRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeOffApi - functional programming interface
 * @export
 */
export const TimeOffApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeOffApiAxiosParamCreator(configuration)
    return {
        /**
         * Approves a time off request.
         * @summary Approve request
         * @param {TimeOffApiApproveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveRequest(requestParameters: TimeOffApiApproveRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveRequest(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all Time Off Requests for a company.
         * @summary Retrieve all requests
         * @param {TimeOffApiGetAllRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRequests(requestParameters: TimeOffApiGetAllRequestsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffGetAllRequestsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRequests(requestParameters.perPage, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns entitlements for each engagement of the company.
         * @summary Retrieve entitlements
         * @param {TimeOffApiGetEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntitlements(requestParameters: TimeOffApiGetEntitlementsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffGetEntitlementsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntitlements(requestParameters.perPage, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns details for a request.
         * @summary Retrieve an individual request
         * @param {TimeOffApiGetRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequest(requestParameters: TimeOffApiGetRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeOffGetRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequest(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rejects a time off request.
         * @summary Reject request
         * @param {TimeOffApiRejectRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectRequest(requestParameters: TimeOffApiRejectRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeOffRejectRequestRequest: TimeOffRejectRequestRequest = {
                reason: requestParameters.reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectRequest(requestParameters.id, timeOffRejectRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeOffApi - factory interface
 * @export
 */
export const TimeOffApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeOffApiFp(configuration)
    return {
        /**
         * Approves a time off request.
         * @summary Approve request
         * @param {TimeOffApiApproveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveRequest(requestParameters: TimeOffApiApproveRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all Time Off Requests for a company.
         * @summary Retrieve all requests
         * @param {TimeOffApiGetAllRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRequests(requestParameters: TimeOffApiGetAllRequestsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TimeOffGetAllRequestsResponse> {
            return localVarFp.getAllRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns entitlements for each engagement of the company.
         * @summary Retrieve entitlements
         * @param {TimeOffApiGetEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlements(requestParameters: TimeOffApiGetEntitlementsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TimeOffGetEntitlementsResponse> {
            return localVarFp.getEntitlements(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details for a request.
         * @summary Retrieve an individual request
         * @param {TimeOffApiGetRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequest(requestParameters: TimeOffApiGetRequestRequest, options?: AxiosRequestConfig): AxiosPromise<TimeOffGetRequestResponse> {
            return localVarFp.getRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Rejects a time off request.
         * @summary Reject request
         * @param {TimeOffApiRejectRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectRequest(requestParameters: TimeOffApiRejectRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rejectRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveRequest operation in TimeOffApi.
 * @export
 * @interface TimeOffApiApproveRequestRequest
 */
export type TimeOffApiApproveRequestRequest = {
    
    /**
    * Time Off Request ID
    * @type {string}
    * @memberof TimeOffApiApproveRequest
    */
    readonly id: string
    
}

/**
 * Request parameters for getAllRequests operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetAllRequestsRequest
 */
export type TimeOffApiGetAllRequestsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof TimeOffApiGetAllRequests
    */
    readonly perPage?: number
    
    /**
    * 
    * @type {number}
    * @memberof TimeOffApiGetAllRequests
    */
    readonly page?: number
    
}

/**
 * Request parameters for getEntitlements operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetEntitlementsRequest
 */
export type TimeOffApiGetEntitlementsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof TimeOffApiGetEntitlements
    */
    readonly perPage?: number
    
    /**
    * 
    * @type {number}
    * @memberof TimeOffApiGetEntitlements
    */
    readonly page?: number
    
}

/**
 * Request parameters for getRequest operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetRequestRequest
 */
export type TimeOffApiGetRequestRequest = {
    
    /**
    * Time Off Request ID
    * @type {string}
    * @memberof TimeOffApiGetRequest
    */
    readonly id: string
    
}

/**
 * Request parameters for rejectRequest operation in TimeOffApi.
 * @export
 * @interface TimeOffApiRejectRequestRequest
 */
export type TimeOffApiRejectRequestRequest = {
    
    /**
    * Time Off Request ID
    * @type {string}
    * @memberof TimeOffApiRejectRequest
    */
    readonly id: string
    
} & TimeOffRejectRequestRequest

/**
 * TimeOffApiGenerated - object-oriented interface
 * @export
 * @class TimeOffApiGenerated
 * @extends {BaseAPI}
 */
export class TimeOffApiGenerated extends BaseAPI {
    /**
     * Approves a time off request.
     * @summary Approve request
     * @param {TimeOffApiApproveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public approveRequest(requestParameters: TimeOffApiApproveRequestRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).approveRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all Time Off Requests for a company.
     * @summary Retrieve all requests
     * @param {TimeOffApiGetAllRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getAllRequests(requestParameters: TimeOffApiGetAllRequestsRequest = {}, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getAllRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns entitlements for each engagement of the company.
     * @summary Retrieve entitlements
     * @param {TimeOffApiGetEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getEntitlements(requestParameters: TimeOffApiGetEntitlementsRequest = {}, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getEntitlements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns details for a request.
     * @summary Retrieve an individual request
     * @param {TimeOffApiGetRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getRequest(requestParameters: TimeOffApiGetRequestRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rejects a time off request.
     * @summary Reject request
     * @param {TimeOffApiRejectRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public rejectRequest(requestParameters: TimeOffApiRejectRequestRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).rejectRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
