/* tslint:disable */
/* eslint-disable */
/*
Endpoints

Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelError } from '../models';
// @ts-ignore
import { PayrollGetAllPayrollsResponse } from '../models';
// @ts-ignore
import { PayrollGetByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayrollApi - axios parameter creator
 * @export
 */
export const PayrollApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of payrolls
         * @summary Retrieve all payroll
         * @param {number} [perPage] 
         * @param {number} [page] 
         * @param {string} [from] 
         * @param {string} [to] 
         * @param {boolean} [includeRecords] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayrolls: async (perPage?: number, page?: number, from?: string, to?: string, includeRecords?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/payroll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (includeRecords !== undefined) {
                localVarQueryParameter['include_records'] = includeRecords;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payroll',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns details for a payroll with a given payroll ID.
         * @summary Retrieve an individual payroll
         * @param {string} id Payroll ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v1/payroll/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/payroll/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollApi - functional programming interface
 * @export
 */
export const PayrollApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of payrolls
         * @summary Retrieve all payroll
         * @param {PayrollApiGetAllPayrollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPayrolls(requestParameters: PayrollApiGetAllPayrollsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollGetAllPayrollsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPayrolls(requestParameters.perPage, requestParameters.page, requestParameters.from, requestParameters.to, requestParameters.includeRecords, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns details for a payroll with a given payroll ID.
         * @summary Retrieve an individual payroll
         * @param {PayrollApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: PayrollApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayrollGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollApi - factory interface
 * @export
 */
export const PayrollApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollApiFp(configuration)
    return {
        /**
         * Returns a list of payrolls
         * @summary Retrieve all payroll
         * @param {PayrollApiGetAllPayrollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayrolls(requestParameters: PayrollApiGetAllPayrollsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayrollGetAllPayrollsResponse> {
            return localVarFp.getAllPayrolls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details for a payroll with a given payroll ID.
         * @summary Retrieve an individual payroll
         * @param {PayrollApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: PayrollApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PayrollGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllPayrolls operation in PayrollApi.
 * @export
 * @interface PayrollApiGetAllPayrollsRequest
 */
export type PayrollApiGetAllPayrollsRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof PayrollApiGetAllPayrolls
    */
    readonly perPage?: number
    
    /**
    * 
    * @type {number}
    * @memberof PayrollApiGetAllPayrolls
    */
    readonly page?: number
    
    /**
    * 
    * @type {string}
    * @memberof PayrollApiGetAllPayrolls
    */
    readonly from?: string
    
    /**
    * 
    * @type {string}
    * @memberof PayrollApiGetAllPayrolls
    */
    readonly to?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof PayrollApiGetAllPayrolls
    */
    readonly includeRecords?: boolean
    
}

/**
 * Request parameters for getById operation in PayrollApi.
 * @export
 * @interface PayrollApiGetByIdRequest
 */
export type PayrollApiGetByIdRequest = {
    
    /**
    * Payroll ID
    * @type {string}
    * @memberof PayrollApiGetById
    */
    readonly id: string
    
}

/**
 * PayrollApiGenerated - object-oriented interface
 * @export
 * @class PayrollApiGenerated
 * @extends {BaseAPI}
 */
export class PayrollApiGenerated extends BaseAPI {
    /**
     * Returns a list of payrolls
     * @summary Retrieve all payroll
     * @param {PayrollApiGetAllPayrollsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getAllPayrolls(requestParameters: PayrollApiGetAllPayrollsRequest = {}, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getAllPayrolls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns details for a payroll with a given payroll ID.
     * @summary Retrieve an individual payroll
     * @param {PayrollApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getById(requestParameters: PayrollApiGetByIdRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
