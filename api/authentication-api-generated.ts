/* tslint:disable */
/* eslint-disable */
/*
Endpoints

Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationCreateAccessTokenRequest } from '../models';
// @ts-ignore
import { Token } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Oyster grants access to API resources based on OAuth. This means that individual customers grant API access to Developer Apps that you create. This applies to both customers and partners. Follow these simple steps: <br><br> 1. [Create an Oyster account](https://app.oysterhr.com/sign_up) or [log in](https://app.oysterhr.com/users/sign_in) to your existing account. <br> <br> 2. Create an Oyster Developer App in the [Developer Tab](https://app.oysterhr.com/developer) (If you can\'t see the developer tab please contact us to enable it for your account). <br> Hint: If you are a customer doing this as a one time action you don\'t need to specify a functioning URL as step 3 will explain. <br> <br> 3. If you are a customer you can simply click on the \"Authorization URL\" and grant access to your own app. You will be redirected to the URL you specified when creating the Developer App. In the URL you will see that `?code=xxx` has been added to the URL. This is the `code` you need to create an access token. <br> If you are a partner add \"Authorization URL to your application. The redirect_url should be a URL that goes back to your app and you\'re able to programmatically retrieve the URL query param of `?code=xxx` to then create an access token. <br> <br> 4. You need to first request an `authorization_code` with the API request detailed below. This will provide an `access_token` that is used as the Bearer Token for making API requests to Oyster. Ensure that you store the `refresh_token` for making future API requests. <br> <br> 5. If your `access_token` has expired then request a new one using your `refresh_token` that you have stored earlier. Ensure you store the new `refresh_token` each time as the previous ones will expire. 
         * @summary Create an access token
         * @param {AuthenticationCreateAccessTokenRequest} authenticationCreateAccessTokenRequest 
         * @param {string} [clientId] The client_id of your Developer App. This can be found by visting https://app.oysterhr.com/developer
         * @param {string} [clientSecret] The secret of your Developer App.
         * @param {string} [grantType] First you need to request an &#x60;authorization_code&#x60;. Afterwards you can request a &#x60;refresh_token&#x60;.
         * @param {string} [code] The code is required when requesting an &#x60;authorization_code&#x60;.
         * @param {string} [redirectUri] The redirect_uri is required when requesting an &#x60;authorization_code&#x60;.
         * @param {string} [refreshToken] A &#x60;refresh_token&#x60; is required when requesting a &#x60;refresh_token&#x60;. A &#x60;refresh_token&#x60; will be provided when requesting an &#x60;authorization_code&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken: async (authenticationCreateAccessTokenRequest: AuthenticationCreateAccessTokenRequest, clientId?: string, clientSecret?: string, grantType?: string, code?: string, redirectUri?: string, refreshToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationCreateAccessTokenRequest' is not null or undefined
            assertParamExists('createAccessToken', 'authenticationCreateAccessTokenRequest', authenticationCreateAccessTokenRequest)
            const localVarPath = `/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (clientId !== undefined) {
                await addFormParam('client_id', clientId, false, true)
            }
    
            if (clientSecret !== undefined) {
                await addFormParam('client_secret', clientSecret, false, true)
            }
    
            if (grantType !== undefined) {
                await addFormParam('grant_type', grantType, false, true)
            }
    
            if (code !== undefined) {
                await addFormParam('code', code, false, true)
            }
    
            if (redirectUri !== undefined) {
                await addFormParam('redirect_uri', redirectUri, false, true)
            }
    
            if (refreshToken !== undefined) {
                await addFormParam('refresh_token', refreshToken, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationCreateAccessTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/oauth2/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationCreateAccessTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Oyster grants access to API resources based on OAuth. This means that individual customers grant API access to Developer Apps that you create. This applies to both customers and partners. Follow these simple steps: <br><br> 1. [Create an Oyster account](https://app.oysterhr.com/sign_up) or [log in](https://app.oysterhr.com/users/sign_in) to your existing account. <br> <br> 2. Create an Oyster Developer App in the [Developer Tab](https://app.oysterhr.com/developer) (If you can\'t see the developer tab please contact us to enable it for your account). <br> Hint: If you are a customer doing this as a one time action you don\'t need to specify a functioning URL as step 3 will explain. <br> <br> 3. If you are a customer you can simply click on the \"Authorization URL\" and grant access to your own app. You will be redirected to the URL you specified when creating the Developer App. In the URL you will see that `?code=xxx` has been added to the URL. This is the `code` you need to create an access token. <br> If you are a partner add \"Authorization URL to your application. The redirect_url should be a URL that goes back to your app and you\'re able to programmatically retrieve the URL query param of `?code=xxx` to then create an access token. <br> <br> 4. You need to first request an `authorization_code` with the API request detailed below. This will provide an `access_token` that is used as the Bearer Token for making API requests to Oyster. Ensure that you store the `refresh_token` for making future API requests. <br> <br> 5. If your `access_token` has expired then request a new one using your `refresh_token` that you have stored earlier. Ensure you store the new `refresh_token` each time as the previous ones will expire. 
         * @summary Create an access token
         * @param {AuthenticationApiCreateAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccessToken(requestParameters: AuthenticationApiCreateAccessTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const authenticationCreateAccessTokenRequest: AuthenticationCreateAccessTokenRequest = {
                client_id: requestParameters.client_id,
                client_secret: requestParameters.client_secret,
                grant_type: requestParameters.grant_type,
                code: requestParameters.code,
                redirect_uri: requestParameters.redirect_uri,
                refresh_token: requestParameters.refresh_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccessToken(authenticationCreateAccessTokenRequest, requestParameters.clientId, requestParameters.clientSecret, requestParameters.grantType, requestParameters.code, requestParameters.redirectUri, requestParameters.refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Oyster grants access to API resources based on OAuth. This means that individual customers grant API access to Developer Apps that you create. This applies to both customers and partners. Follow these simple steps: <br><br> 1. [Create an Oyster account](https://app.oysterhr.com/sign_up) or [log in](https://app.oysterhr.com/users/sign_in) to your existing account. <br> <br> 2. Create an Oyster Developer App in the [Developer Tab](https://app.oysterhr.com/developer) (If you can\'t see the developer tab please contact us to enable it for your account). <br> Hint: If you are a customer doing this as a one time action you don\'t need to specify a functioning URL as step 3 will explain. <br> <br> 3. If you are a customer you can simply click on the \"Authorization URL\" and grant access to your own app. You will be redirected to the URL you specified when creating the Developer App. In the URL you will see that `?code=xxx` has been added to the URL. This is the `code` you need to create an access token. <br> If you are a partner add \"Authorization URL to your application. The redirect_url should be a URL that goes back to your app and you\'re able to programmatically retrieve the URL query param of `?code=xxx` to then create an access token. <br> <br> 4. You need to first request an `authorization_code` with the API request detailed below. This will provide an `access_token` that is used as the Bearer Token for making API requests to Oyster. Ensure that you store the `refresh_token` for making future API requests. <br> <br> 5. If your `access_token` has expired then request a new one using your `refresh_token` that you have stored earlier. Ensure you store the new `refresh_token` each time as the previous ones will expire. 
         * @summary Create an access token
         * @param {AuthenticationApiCreateAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccessToken(requestParameters: AuthenticationApiCreateAccessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<Token> {
            return localVarFp.createAccessToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAccessToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiCreateAccessTokenRequest
 */
export type AuthenticationApiCreateAccessTokenRequest = {
    
    /**
    * The client_id of your Developer App. This can be found by visting https://app.oysterhr.com/developer
    * @type {string}
    * @memberof AuthenticationApiCreateAccessToken
    */
    readonly clientId?: string
    
    /**
    * The secret of your Developer App.
    * @type {string}
    * @memberof AuthenticationApiCreateAccessToken
    */
    readonly clientSecret?: string
    
    /**
    * First you need to request an `authorization_code`. Afterwards you can request a `refresh_token`.
    * @type {string}
    * @memberof AuthenticationApiCreateAccessToken
    */
    readonly grantType?: string
    
    /**
    * The code is required when requesting an `authorization_code`.
    * @type {string}
    * @memberof AuthenticationApiCreateAccessToken
    */
    readonly code?: string
    
    /**
    * The redirect_uri is required when requesting an `authorization_code`.
    * @type {string}
    * @memberof AuthenticationApiCreateAccessToken
    */
    readonly redirectUri?: string
    
    /**
    * A `refresh_token` is required when requesting a `refresh_token`. A `refresh_token` will be provided when requesting an `authorization_code`
    * @type {string}
    * @memberof AuthenticationApiCreateAccessToken
    */
    readonly refreshToken?: string
    
} & AuthenticationCreateAccessTokenRequest

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * Oyster grants access to API resources based on OAuth. This means that individual customers grant API access to Developer Apps that you create. This applies to both customers and partners. Follow these simple steps: <br><br> 1. [Create an Oyster account](https://app.oysterhr.com/sign_up) or [log in](https://app.oysterhr.com/users/sign_in) to your existing account. <br> <br> 2. Create an Oyster Developer App in the [Developer Tab](https://app.oysterhr.com/developer) (If you can\'t see the developer tab please contact us to enable it for your account). <br> Hint: If you are a customer doing this as a one time action you don\'t need to specify a functioning URL as step 3 will explain. <br> <br> 3. If you are a customer you can simply click on the \"Authorization URL\" and grant access to your own app. You will be redirected to the URL you specified when creating the Developer App. In the URL you will see that `?code=xxx` has been added to the URL. This is the `code` you need to create an access token. <br> If you are a partner add \"Authorization URL to your application. The redirect_url should be a URL that goes back to your app and you\'re able to programmatically retrieve the URL query param of `?code=xxx` to then create an access token. <br> <br> 4. You need to first request an `authorization_code` with the API request detailed below. This will provide an `access_token` that is used as the Bearer Token for making API requests to Oyster. Ensure that you store the `refresh_token` for making future API requests. <br> <br> 5. If your `access_token` has expired then request a new one using your `refresh_token` that you have stored earlier. Ensure you store the new `refresh_token` each time as the previous ones will expire. 
     * @summary Create an access token
     * @param {AuthenticationApiCreateAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public createAccessToken(requestParameters: AuthenticationApiCreateAccessTokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).createAccessToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
