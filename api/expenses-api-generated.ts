/* tslint:disable */
/* eslint-disable */
/*
Endpoints

Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AsyncResponse } from '../models';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { ExpensesCreateOperationKeyRequest } from '../models';
// @ts-ignore
import { ExpensesCreateOperationKeyRequestReceiptAmount } from '../models';
// @ts-ignore
import { ExpensesDeclineExpenseRequest } from '../models';
// @ts-ignore
import { ExpensesGetByIdResponse } from '../models';
// @ts-ignore
import { FieldErrors } from '../models';
// @ts-ignore
import { ModelError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExpensesApi - axios parameter creator
 * @export
 */
export const ExpensesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approves an expense.
         * @summary Approve expense
         * @param {string} id Expense ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveExpense: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approveExpense', 'id', id)
            const localVarPath = `/v1/expenses/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{id}/approve',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new expense for an engagement. This is an asynchronous operation. Returns operationKey that can be used to retrieve the operation to know if it\'s successfully completed
         * @summary Create expense
         * @param {ExpensesCreateOperationKeyRequest} [expensesCreateOperationKeyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperationKey: async (expensesCreateOperationKeyRequest?: ExpensesCreateOperationKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expensesCreateOperationKeyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expensesCreateOperationKeyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Declines an expense.
         * @summary Decline expense
         * @param {string} id Expense ID
         * @param {ExpensesDeclineExpenseRequest} [expensesDeclineExpenseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineExpense: async (id: string, expensesDeclineExpenseRequest?: ExpensesDeclineExpenseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('declineExpense', 'id', id)
            const localVarPath = `/v1/expenses/{id}/decline`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: expensesDeclineExpenseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{id}/decline',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(expensesDeclineExpenseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns details for an expense with a given expense ID.
         * @summary Retrieve an individual expense
         * @param {string} id Expense ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/v1/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/expenses/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpensesApi - functional programming interface
 * @export
 */
export const ExpensesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpensesApiAxiosParamCreator(configuration)
    return {
        /**
         * Approves an expense.
         * @summary Approve expense
         * @param {ExpensesApiApproveExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveExpense(requestParameters: ExpensesApiApproveExpenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveExpense(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new expense for an engagement. This is an asynchronous operation. Returns operationKey that can be used to retrieve the operation to know if it\'s successfully completed
         * @summary Create expense
         * @param {ExpensesApiCreateOperationKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOperationKey(requestParameters: ExpensesApiCreateOperationKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AsyncResponse>> {
            const expensesCreateOperationKeyRequest: ExpensesCreateOperationKeyRequest = {
                description: requestParameters.description,
                engagementId: requestParameters.engagementId,
                name: requestParameters.name,
                incurredOn: requestParameters.incurredOn,
                category: requestParameters.category,
                receiptUrl: requestParameters.receiptUrl,
                receiptAmount: requestParameters.receiptAmount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOperationKey(expensesCreateOperationKeyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Declines an expense.
         * @summary Decline expense
         * @param {ExpensesApiDeclineExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async declineExpense(requestParameters: ExpensesApiDeclineExpenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const expensesDeclineExpenseRequest: ExpensesDeclineExpenseRequest = {
                reason: requestParameters.reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.declineExpense(requestParameters.id, expensesDeclineExpenseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns details for an expense with a given expense ID.
         * @summary Retrieve an individual expense
         * @param {ExpensesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: ExpensesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpensesApi - factory interface
 * @export
 */
export const ExpensesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpensesApiFp(configuration)
    return {
        /**
         * Approves an expense.
         * @summary Approve expense
         * @param {ExpensesApiApproveExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveExpense(requestParameters: ExpensesApiApproveExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveExpense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new expense for an engagement. This is an asynchronous operation. Returns operationKey that can be used to retrieve the operation to know if it\'s successfully completed
         * @summary Create expense
         * @param {ExpensesApiCreateOperationKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperationKey(requestParameters: ExpensesApiCreateOperationKeyRequest, options?: AxiosRequestConfig): AxiosPromise<AsyncResponse> {
            return localVarFp.createOperationKey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Declines an expense.
         * @summary Decline expense
         * @param {ExpensesApiDeclineExpenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        declineExpense(requestParameters: ExpensesApiDeclineExpenseRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.declineExpense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details for an expense with a given expense ID.
         * @summary Retrieve an individual expense
         * @param {ExpensesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: ExpensesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ExpensesGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveExpense operation in ExpensesApi.
 * @export
 * @interface ExpensesApiApproveExpenseRequest
 */
export type ExpensesApiApproveExpenseRequest = {
    
    /**
    * Expense ID
    * @type {string}
    * @memberof ExpensesApiApproveExpense
    */
    readonly id: string
    
}

/**
 * Request parameters for createOperationKey operation in ExpensesApi.
 * @export
 * @interface ExpensesApiCreateOperationKeyRequest
 */
export type ExpensesApiCreateOperationKeyRequest = {
    
} & ExpensesCreateOperationKeyRequest

/**
 * Request parameters for declineExpense operation in ExpensesApi.
 * @export
 * @interface ExpensesApiDeclineExpenseRequest
 */
export type ExpensesApiDeclineExpenseRequest = {
    
    /**
    * Expense ID
    * @type {string}
    * @memberof ExpensesApiDeclineExpense
    */
    readonly id: string
    
} & ExpensesDeclineExpenseRequest

/**
 * Request parameters for getById operation in ExpensesApi.
 * @export
 * @interface ExpensesApiGetByIdRequest
 */
export type ExpensesApiGetByIdRequest = {
    
    /**
    * Expense ID
    * @type {string}
    * @memberof ExpensesApiGetById
    */
    readonly id: string
    
}

/**
 * ExpensesApiGenerated - object-oriented interface
 * @export
 * @class ExpensesApiGenerated
 * @extends {BaseAPI}
 */
export class ExpensesApiGenerated extends BaseAPI {
    /**
     * Approves an expense.
     * @summary Approve expense
     * @param {ExpensesApiApproveExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public approveExpense(requestParameters: ExpensesApiApproveExpenseRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).approveExpense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new expense for an engagement. This is an asynchronous operation. Returns operationKey that can be used to retrieve the operation to know if it\'s successfully completed
     * @summary Create expense
     * @param {ExpensesApiCreateOperationKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public createOperationKey(requestParameters: ExpensesApiCreateOperationKeyRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).createOperationKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Declines an expense.
     * @summary Decline expense
     * @param {ExpensesApiDeclineExpenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public declineExpense(requestParameters: ExpensesApiDeclineExpenseRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).declineExpense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns details for an expense with a given expense ID.
     * @summary Retrieve an individual expense
     * @param {ExpensesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiGenerated
     */
    public getById(requestParameters: ExpensesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return ExpensesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
