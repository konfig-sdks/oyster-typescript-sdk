/* tslint:disable */
/* eslint-disable */
/*
Endpoints

Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OperationsGetByOperationKeyResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OperationsApi - axios parameter creator
 * @export
 */
export const OperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns details for an operation with a given operation key.
         * @summary Retrieve an operation
         * @param {string} operationKey Operation key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByOperationKey: async (operationKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationKey' is not null or undefined
            assertParamExists('getByOperationKey', 'operationKey', operationKey)
            const localVarPath = `/v1/meta/operations/{operation_key}`
                .replace(`{${"operation_key"}}`, encodeURIComponent(String(operationKey !== undefined ? operationKey : `-operation_key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/meta/operations/{operation_key}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationsApi - functional programming interface
 * @export
 */
export const OperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns details for an operation with a given operation key.
         * @summary Retrieve an operation
         * @param {OperationsApiGetByOperationKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByOperationKey(requestParameters: OperationsApiGetByOperationKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationsGetByOperationKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByOperationKey(requestParameters.operationKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OperationsApi - factory interface
 * @export
 */
export const OperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperationsApiFp(configuration)
    return {
        /**
         * Returns details for an operation with a given operation key.
         * @summary Retrieve an operation
         * @param {OperationsApiGetByOperationKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByOperationKey(requestParameters: OperationsApiGetByOperationKeyRequest, options?: AxiosRequestConfig): AxiosPromise<OperationsGetByOperationKeyResponse> {
            return localVarFp.getByOperationKey(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByOperationKey operation in OperationsApi.
 * @export
 * @interface OperationsApiGetByOperationKeyRequest
 */
export type OperationsApiGetByOperationKeyRequest = {
    
    /**
    * Operation key
    * @type {string}
    * @memberof OperationsApiGetByOperationKey
    */
    readonly operationKey: string
    
}

/**
 * OperationsApiGenerated - object-oriented interface
 * @export
 * @class OperationsApiGenerated
 * @extends {BaseAPI}
 */
export class OperationsApiGenerated extends BaseAPI {
    /**
     * Returns details for an operation with a given operation key.
     * @summary Retrieve an operation
     * @param {OperationsApiGetByOperationKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApiGenerated
     */
    public getByOperationKey(requestParameters: OperationsApiGetByOperationKeyRequest, options?: AxiosRequestConfig) {
        return OperationsApiFp(this.configuration).getByOperationKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
